* Rust
fn num_iters(cx: f64, cy: f64, max_iters: u32) -> u32 {
    let mut z = Complex::new(0.0, 0.0);
    let c = Complex::new(cx, cy);

    for i in 0..=max_iters {
        if z.norm() > 2.0 {
            return i;
        }
        z = z * z + c;
    }

    max_iters
}

* Athenaeum
numIters : Float64 -> Float64 -> Uint32 -> Uint32
numIters = fn cx cy maxIters -> do
    z = state <| new Complex 0 0
    c = new Complex cx cy
    for 0..maxIters fn i -> do
        if z :norm > 2 then return i
        z := z * z + c
    return Ok maxIters

* Rust
fn hex2rgb(hex: &str) -> Result <Vec <u8>, String> {
    let hex = hex.trim_start_matches('#');
    if hex.len() != 6 {
        return Err("Invalid HEX color length".to_string());
    }

    let r = u8::from_str_radix(&hex[0..2], 16).map_err(|_| "Invalid HEX color")?;
    let g = u8::from_str_radix(&hex[2..4], 16).map_err(|_| "Invalid HEX color")?;
    let b = u8::from_str_radix(&hex[4..6], 16).map_err(|_| "Invalid HEX color")?;

    Ok(vec![r, g, b])
}

* Athenaeum

* Um, it actually *is*, lol
* `!_` can just have lower precedence that fn calls
* Not just `Array Uint8 3` for three reasons:
*   1. It allows to use `!GenericTy[arg1, arg2]` and similar instead of wrapping it parentheses
*       due to precedence
*   2. It makes generic types appear more explicit and easier to find
*   3. It looks great
*   4. (maybe) Because types are encoded in lambda calculus notation, i.e. the Church notation
*       Thus they take a function that inspects the insides and so brackets are required to distinguish
*       That is probably not an actual argument since it would require either overloaded operators that work
*           on functions, which is bad because functions cannot be primary objects in such a system
RGB = Array Uint8 3

hex2rgb : String -> !RGB
hex2rgb = fn hex -> do
    hex = hex :stripPrefix? "#"
    if hex :len != 6 then return Err "Invalid HEX color length"
    r = hex[1..2] :parseWithRadix Uint8 16 :err? { "Invalid HEX color" }
    g = hex[3..4] :parseWithRadix Uint8 16 :err? { "Invalid HEX color" }
    b = hex[5..6] :parseWithRadix Uint8 16 :err? { "Invalid HEX color" }
    return Ok [r g b]

* Rust
fn lerp_color(color1: &[u8; 3], color2: &[u8; 3], value: f64) -> [u8; 3] {
    [
        (color1[0] as f64 + (color2[0] as f64 - color1[0] as f64) * value) as u8,
        (color1[1] as f64 + (color2[1] as f64 - color1[1] as f64) * value) as u8,
        (color1[2] as f64 + (color2[2] as f64 - color1[2] as f64) * value) as u8,
    ]
}

* Athenaeum
lerpColor : RGB -> RGB -> Float64 -> RGB
lerpColor = fn x y value -> [
    x[1] :to Float64 + (y[1] :to Float64 - x[1] :to Float64) * value :to Uint8
    x[2] :to Float64 + (y[2] :to Float64 - x[2] :to Float64) * value :to Uint8
    x[3] :to Float64 + (y[3] :to Float64 - x[3] :to Float64) * value :to Uint8
]
    

* Rust
fn get_gradient(gradient_colors: Vec<&str>, max_iters: u32) -> Vec<[u8; 3]> {
    let mut colors = vec![];
    let mut gradient_colors_rgb = vec![];
    for color in &gradient_colors {
        let rgb = hex2rgb(color).unwrap();
        gradient_colors_rgb.push([rgb[0], rgb[1], rgb[2]]);
    }

    for i in 0..max_iters {
        let color_index = (i as usize * (gradient_colors.len() - 1)) / max_iters as usize;
        let color_value = (i as f64 * (gradient_colors.len() as f64 - 1.0)) / max_iters as f64;
        let value = color_value % 1.0;
        colors.push(lerp_color(
            &gradient_colors_rgb[color_index],
            &gradient_colors_rgb[color_index + 1],
            value,
        ));
    }

    colors
}

* Athenaeum
getGradient : List String -> Uint32 -> IO List RGB
getGradient = fn gradientColors maxIters -> do
    colors = state <| list []
    gradientColorsRGB = state <| list []
    for gradientColors fn color -> do
        rgb = hex2rgb color :unwrap
        gradientColorsRGB := gradientColorsRGB :push [rgb[1] rgb[2] rgb[3]]
    for 0..<maxIters fn i -> do
        colorIndex = (i * (gradientColors :len - 1) :to Usize) / maxIters :to Usize
        colorValue = (i :to Float64 * (gradientColors :len :to Float64 - 1.0)) / (maxIters :to Float64)
        value = colorValue mod 1.0
        colors := colors :push <| lerpColor
            gradientColorsRGB[colorIndex + 1]
            gradientColorsRGB[colorIndex + 2]
            value
    return Ok colors

* Rust
#[tokio::main]
async fn main() -> Result<(), EchoError> {
    let state = State {
        counter: 0,
    };

    let echo_ref = ActorRef::new("echo", Echo{}, state, 100000).await?;

    println!("Sent Ping");
    echo_ref.send(Message::Ping).await?;

    println!("Sent Ping and ask response");
    let pong = echo_ref.ask(Message::Ping).await?;
    println!("Got {:?}", pong);

    let _ = echo_ref.stop().await;
    Ok(())
}

* Athenaeum
main : IO !Unit
main = Tokio.main async do
    actorState = new State 0

    echoRef = new ActorRef "echo" (new Echo) actorState 100_000 :await?

    println "Sent Ping"
    echoRef :send Message.Ping :await?

    println "Sent Ping and ask response"
    pong = echoRef :ask Message.Ping :await?
    println "Got {debug pong}"

    _ = echoRef :stop :await?
    return Ok pass

* Python
async def create_taiga_issue(update: Update, data: dict) -> dict:
    message = update.effective_message
    profile = data["profile"]
    client_info = (
        f'**–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å**: {profile.get("name", "–ò–ú–Ø")} {profile.get("age", "–í–û–ó–†–ê–°–¢")}\n'
        f'**–°—Å—ã–ª–∫–∞ –Ω–∞ —Ç–µ–ª–µ–≥—Ä–∞–º**: {profile.get("messengerLink", "–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç username")}\n'
        f'**–°—Å—ã–ª–∫–∞ –Ω–∞ –¥–∏–∞–ª–æ–≥**: {urljoin(config.FRONT_URL, config.ENDPOINT_CONVERSATIONS)}?clientId={profile.get("clientId", "")}\n'
    )

    date = datetime.datetime.now().astimezone(config.LOCAL_TIME_ZONE).date()
    date_str = date.strftime("%d-%m-%y")

    if message.text_html_urled is None:
        message_text = ""
        message_short = ""
    else:
        message_text = "\n" + html_to_md(message.text_html_urled)
        message_short = f"{message.text[:200]}..." if len(message.text) > 200 else message.text
        message_short = ": " + message_short.replace("\n", " ")
    if message.audio or message.document or message.animation or message.video or message.voice:
        media_text = "\n<–í–ª–æ–∂–µ–Ω–∏–µ —Å–º. –≤ –¥–∏–∞–ª–æ–≥–µ>"
    else:
        media_text = ""
    subject = f"–ó–∞—è–≤–∫–∞ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É –æ—Ç {date_str}{message_short}"
    description = f"{client_info}{message_text}{media_text}\n"

    try:
        issue = await taiga.create_issue(subject, description)
    except Exception as e:
        log.error(f"Failed creation of issue in Taiga: {e}")
        return None

    if issue:
        issue["issue_no"] = f'{date_str}_{issue["issue_id"]}'
    return issue

* Athenaeum
createTaigaIssue : Update -> Dict -> Dict?
createTaigaIssue = async fn update data -> do
    message = update :effectiveMessage
    profile = data["profile"]
    clientInfo = do
        name = profile :get "name" :or { "–ò–ú–Ø" }
        age  = profile :get "age"  :or { "–í–û–ó–†–ê–°–¢" }

        messengerLink = profile :get "messengerLink" :or { "–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç username" }

        dialogUrl = Config.FRONT_URL ++ Config.ENDPOINT_CONVERSATIONS
        clientId  = profile :get "clientId" :or { "" }

        breakdo "
            **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å**: {name} {age}
            **–°—Å—ã–ª–∫–∞ –Ω–∞ —Ç–µ–ª–µ–≥—Ä–∞–º**: {messengerLink}
            **–°—Å—ã–ª–∫–∞ –Ω–∞ –¥–∏–∞–ª–æ–≥**: {dialogUrl}?clientId={clientId}
            "

    date = AA.DateTime.now
        :asTimeZone Config.LOCAL_TIME_ZONE
        :date
        :strftime "%d-%m-%y"

    messageText, messageShort = match (message :textHtmlUrled) do
        None => "", ""
        Some => fn text -> do
            messageText = newline ++ htmlToMd text
            messageShort = if message.text :len > 200 then
                message.text[..<200] ++ "..."
            else
                message.text
            messageShort = ": " ++ (messageShort :replace newline :with " ")
            return messageText, messageShort
    mediaText = if message.audio :isSome or message.document :isSome or message.animation :isSome or message.video :isSome or message.voice :isSome then
        "{newline}<–í–ª–æ–∂–µ–Ω–∏–µ —Å–º. –≤ –¥–∏–∞–ª–æ–≥–µ>"
    else
        ""

    subject = "–ó–∞—è–≤–∫–∞ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É –æ—Ç {date}{messageShort}"
    description = clientInfo ++ messageText ++ mediaText ++ newline

    issue = Taiga.createIssue subject description
        :inspectErr { log :error "Failed creation of issue in Taiga: {x}" }

    return issue :map { x with .issueNo "{date}_{issue['issueId']}" }


* Crystal
max = 100

sieve = Array.new(max + 1, true)
sieve[0] = false
sieve[1] = false

2.step(to: Math.sqrt(max)) do |i|
  if sieve[i]
    (i * i).step(to: max, by: i) do |j|
      sieve[j] = false
    end
  end
end

sieve.each_with_index do |prime, number|
  if prime
    puts number
  end
end

* Athenaeum
MAX = 100

main : IO Unit
main = do
    sieve = state <| [Yes] :repeat (MAX + 1)
    sieve[1] := No
    sieve[2] := No
    for 3..sqrt MAX fn i -> do
        if sieve[i] then
            for ((i * i)..MAX :stepBy i) fn j -> do
                sieve[j] := No
	
    for (sieve :iter :enumerate) fn prime, number -> do
        if prime then
            println "{number}"

* Python
async def notify_psych(client_profile: dict, psych_chat_id: str):
    log.debug("NOTIFY PSY" + str(psych_chat_id) + str(client_profile))

    message = "<b>‚ù£Ô∏èüì© –í–∞–º –Ω–∞–ø–∏—Å–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å üì©‚ù£Ô∏è</b> " \
              + str(client_profile.get("name", "–ò–ú–Ø")) + str(client_profile.get("age", "–í–û–ó–†–ê–°–¢")) + "\n" \
              + str(f"{config.FRONT_URL}{config.ENDPOINT_CONVERSATIONS}?clientId={client_profile.get('clientId', '')}")\
              + "\n"

    await bot.sendMessage(
        chat_id=psych_chat_id,
        text=message,
        parse_mode=ParseMode.HTML,
        disable_web_page_preview=True,
    )

* Athenaeum
notifyPsych = async fn clientProfile psychChatId -> do
	log :debug "NOTIFY PSY {psychChatId}{clientProfile}"
    
    message = "
    		<b>‚ù£Ô∏èüì© –í–∞–º –Ω–∞–ø–∏—Å–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å üì©‚ù£Ô∏è</b> {clientProfile :get 'name' :or { '–ò–ú–Ø' } }{clientProfile :get 'age' :or { '–í–û–ó–†–ê–°–¢'} }
    		{config.FRONT_URL}{config.ENDPOINT_CONVERSATIONS}?clientId={clientProfile :get 'clientId' :or { '' } }
    		"

    bot :sendMessage
        with .text                  message
        with .chatId                psychChatId
        with .parseMode             ParseMode.HTML
        with .disableWebPagePreview Yes
        :build
        :await

* Rust
fn main() {
    let pangram = "the quick brown fox jumps over the lazy dog";
    println!("Pangram: {}", pangram);

    println!("Words in reverse");
    for word in pangram.split_whitespace().rev() {
        println!("> {}", word);
    }

    let mut chars = pangram.chars().collect:<Vec <_>>();
    chars.sort();
    chars.dedup();

    let mut string = String:new();
    for c in chars {
        string.push(c);
        string.push_str(", ");
    }

    let chars_to_trim = &[' ', ','];
    let trimmed_str = string.trim_matches(chars_to_trim);
    println!("Used characters: {}", trimmed_str);

    let alice = String:from("I like dogs");
    let bob = alice.replace("dog", "cat");

    println!("Alice says: {}", alice);
    println!("Bob says: {}", bob);
}

* Athenaeum
main : IO Unit
main = do
	pangram = "the quick brown fox jumps over the lazy dog"
	println "Pangram: {pangram}"
	
	println "Words in reverse"
	for (pangram :split :reverse) fn word -> do
		println "> {word}"
	
	chars = state <| pangram :iter :to List
	chars := chars :sortAsc :deDuplicate
	
	string = state <| str ""
	for chars fn ch -> do
		string :++= "{ch}, "
	
	charsToTrim = " ,"
	trimmedStr = string :stripByAnyOf charsToTrim
	println "Used characters: {trimmedStr}"
	
	alice = "I like dogs"
	bob = alice :replace "dog" :with "cat"
	
	println "Alice says: {alice}"
	println "Bob says: {bob}"

* Gluon
let de @ { Deserialize, ? } = import! std.json.de
let ser @ { Serialize, ? } = import! std.json.ser
let { Result, ? } = import! std.result

#[derive(Serialize, Deserialize)]
type Vec = { x : Float, y : Float, name : Option String }

let result =
    let input = r#"{ "x": 123, "y": 456.78, "name": null }"#
   do v = de.deserialize input
    let v : Vec = v
    let updated = { x = v.x, y = v.y, name = Some "Vector" }
    ser.to_string_pretty updated

match result with
| Ok s -> s
| Err err -> err

* Athenaeum
in AA.SerdeJson only Json

Vec =
	.x    : Float32 *
	.y    : Float32 *
	.name : String? *

main : IO !Unit
main = do
	result = identity? do
		input = '{ "x": 123, "y": 456.78, "name": null }'
		v = input |> deserialize? Json :to Vec
		updated = new Vec v.x v.y (Some "Vector")
		breakdo updated |> serialize? Json
	println "{result}"

* Elm
import Html exposing (..)

main =
  div []
    [ h1 [] [ text "My Grocery List" ]
    , ul []
        [ li [] [ text "Black Beans" ]
        , li [] [ text "Limes" ]
        , li [] [ text "Greek Yogurt" ]
        , li [] [ text "Cilantro" ]
        , li [] [ text "Honey" ]
        , li [] [ text "Sweet Potatoes" ]
        , li [] [ text "Cumin" ]
        , li [] [ text "Chili Powder" ]
        , li [] [ text "Quinoa" ]
        ]
    ]

* Athenaeum
in AA.Html.Tags *

main : Html
main = html do
	div do
		h1 do text "My Grocery List"
		ul do
			li do text "Black Beans"
			li do text "Limes"
		    li do text "Greek Yogurt"
		    li do text "Cilantro"
		    li do text "Honey"
		    li do text "Sweet Potatoes"
		    li do text "Cumin"
		    li do text "Chili Powder"
		    li do text "Quinoa"

* Haskell
data LoginError
  = InvalidEmail
  | NoSuchUser
  | WrongPassword
  deriving (Show)

getDomain :: Text -> Either LoginError Text
getDomain email =
  case T.splitOn "@" email of
    [_, domain] -> Right domain
    _           -> Left InvalidEmail

getToken :: IO (Either LoginError Text)
getToken = do
  T.putStrLn "Enter email address:"
  email <- T.getLine
  pure $ getDomain email

users :: Map Text Text
users = Map.fromList
  [ ("example.com", "qwerty123")
  , ("localhost", "password")
  ]

userLogin :: IO (Either LoginError Text)
userLogin = do
  token <- getToken
  case token of
    Right domain ->
      case Map.lookup domain users of
        Just password -> do
          T.putStrLn "Enter password:"
          pw <- T.getLine
          if pw == password then
            pure $ Right domain
          else
            pure $ Left WrongPassword
        Nothing ->
          pure $ Left NoSuchUser
    left    ->
      pure $ left

* Athenaeum
LoginError =
    .InvalidEmail  : Unit +
    .NoSuchUser    : Unit +
    .WrongPassword : Unit +
in variants LoginError only *

getDomain : Text -> !Text
getDomain = fn email -> email :splitBy "@" :into (String * String) :map { x[2] }
    :err { InvalidEmail }

getToken : IO !Text
getToken = do
    println "Enter email address:"
    email = scanln?
    return getDomain email

users : Dictionary Text Text
users = dictionary [
	"example.com", "qwerty123"
	"localhost", "password"
]

userLogin : IO !Text
userLogin = do
	domain = getToken?
	password = users :lookup domain :err? { NoSuchUser }
	println "Enter password:"
	pw = scanln?
	return if pw == password then
		Ok domain
	else
		Err WrongPassword

main : IO Unit
main = println "Hello, world!"

* Rust
use std::str::FromStr;

fn get_count_item(s: &str) -> (u64, &str) {
    let mut it = s.split(' ');
    let (Some(count_str), Some(item)) = (it.next(), it.next()) else {
        panic!("Can't segment count item pair: '{s}'");
    };
    let Ok(count) = u64::from_str(count_str) else {
        panic!("Can't parse integer: '{count_str}'");
    };
    (count, item)
}

fn main() {
    assert_eq!(get_count_item("3 chairs"), (3, "chairs"));
}

* Athenaeum
getCountItem : String -> IO Uint64 * Str
getCountItem = fn s -> do
	countStr, item = s :splitBy ' ' :into (String * String) :or { panic "Can't segment count item pair: '{s}'" }
	count = countStr :into Uint64 :or { panic "Can't parse integer: '{countStr}'" }
	return count, item

main : IO Unit
main = do
	assert getCountItem "3 chairs" :unwrap == (3, "chairs")

* Flix
enum Shape {
    case Circle(Int),        // has circle radius
    case Square(Int),        // has side length
    case Rectangle(Int, Int) // has height and width
}

def area(s: Shape): Int = match s {
    case Circle(r)       => 3 * (r * r)
    case Square(w)       => w * w
    case Rectangle(h, w) => h * w
}

def map(f: a -> b, l: List[a]): List[b] = match l {
    case Nil     => Nil
    case x :: xs => f(x) :: map(f, xs)
}

* Athenaeum
Shape =
    * Has circle radius
    .Circle : Int          +
    * Has side length
    .Square : Int          +
    * Has height and width
    .Rectangle : Int * Int +
in variants Shape only *

area : Shape -> Int
area = fn s -> match s do
    Circle    => fn r    -> 3 * (r * r)
    Square    => fn w    -> w * w
    Rectangle => fn h, w -> h * w

map : (a -> b) -> List a -> List b
map = fn f l -> match (l :isEmpty) do
    Yes => []
    No  => [f (l :atUnchecked 1)] ++ map f l[1..]

* Go
func Backwards[E any](s []E) func(func(int, E) bool) {
    return func(yield func(int, E) bool) {
        for i := len(s) - 1; i >= 0; i-- {
            if !yield(i, s[i]) {
                return
            }
        }
    }
}

* Athenaeum
Backwards : Slice e -> (Int32 -> e -> m Bool) -> m Unit
Backwards = fn s yield -> do
    loopwith (s :len) { x >= 1 } { x - 1 } fn i -> do
        if not yield i s[i] then
            return

