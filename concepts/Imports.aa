* All sibling modules are available by their name
* All sibling folders containing at least 1 module are also available by their name
* There is also a special file `Build.aa` placed in the root of the project
* It is used to configure the project, kinda like `Cargo.toml` and `build.rs` combined in Rust
* For a structure:
*
* root
* \__ src
*     \__ Foo.aa
*     \__ Bar.aa
*     \__ Oops
*         \__ hi.txt
*     \__ Quux
*         \__ Chuk.aa
*         \__ Gek.aa
* \__ Build.aa
*
* In the `Foo` module there will be available `Bar` and `Quux`
* Everything configured as `prelude` in `Build.aa` is also available in `Foo`
* Notice how `Oops` is not accessible for it does not contain Athenaeum code files
* `Bar` is be a module with the contents of `Bar.aa`
* `Quux` only contains two submodules - `Quux.Chuk` and `Quux.Gek` and no other content
* Note that `src` dir is not visible in `Foo`

* `in` <Athenaeum expression> `only` [`*` | `*` `except` <ident>+ | <idents>]
* <idents> ::= [<ident> `as` <ident>] | [<ident> | (<ident> `as` <ident>)]+

* Imports `BBB` from `AAA`
in AAA only *

* Incorrect
* `in <expr> must always be followed by `only`
* in AAA.BBB

* Imports `BBB` from `AAA` as `CCC`
in AAA only BBB as CCC

* Imports `CCC` from `AAA.BBB`
in AAA.BBB only CCC

* Imports `BBB` and `CCC`
in AAA only BBB CCC

* Imports everything from `AAA`
in AAA only *

* Rust's `use AAA::{BBB, CCC::{self, DDD, EEE}}`
in AAA only BBB CCC
in CCC only DDD EEE

* Imports everything from `AAA` except for `bbb` and `ccc`
in AAA only * except bbb ccc

* Imports everything from `AAA` except for `bbb`, which is imported as `ccc`
in AAA only * except bbb as ccc

* Import nothing from `AAA`
* Useful for explicit import of `Prelude` to disable implicit members if you want nothing from it
in AAA only * except *

in AA.Regex only Regex regex

* You cannot import `Iterator (..)` like in Haskell,
*   so you have to manually import every function you need
in AA.Iterator only Iterator map filter

in AA.State only _:=_

