* String
* Special literal syntax
"abcdef"

* Tuple
* `_,_` operator
* `_,_` has lower priority than fn application and `a :b`
a, b
a, b, c

* Tuple of `(A * B) * C`
* Note that `(a, b), c` != `a, b, c`
*     and `(A * B) * C` != `A * B * C`
* `(_)` operator does not just wrap an expression, but also "freezes" tuples and tuple types
*     so they are not extended by `_,_` and `_*_` accordingly
(a, b), c

* Tuple of one element
* `_,` operator used on a tuple does nothing (=identity), this is used to allow trailing commas
* `_,` operator used on a non-tuple converts it to a one element tuple
a,

* unit tuple (of type `Unit`)
* Named `pass` so that in pattern matching you would use `... => pass` instead of `... => unit`
pass

* Array
* Single-line (separated by space) - builtin syntax
* Differs from indexing by a required space before the `[`
[a b c]
[(a + b) (a - b) (a * b)]
* Multi-line (separated by newlines)
[
	a
	b
	c
]
[
	a + b
	a - b
	a * b
]


* ARRAYS as above (determined by space)
* ALLOW do to have continuation on the same line if it is part of operator
* `_,_` has lower priority than `a :b`

* Array of tuples
[(1, 2) (3, 4)]

* List
* Rust's `Vec`
list [a b c]

* Dictionary
* It could have been almost 1-to-1 translation from JSON and python formats by
*     (ab)using `{ ... }` lambda expressions and `_:_` operator
* But I decided not to, because it is inconsistent with the rest of the collection literals
*     plus `_:_` should be used only for type definition
dictionary [
	"abc", 123
	"def", 456
]

* Mathematical vector type
vec [0.0 0.0]

* `:row` or `:column` to specify how to multiply with matrix
(vec [1 0] :row) * (AA.Matrix.id Int32 2Ã—2)

* Matrix
matrix [
    [1 2 3]
    [4 5 6]
    [7 8 9]
]

