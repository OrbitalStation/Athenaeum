* `new` is only used to create a type value-by-value, with no other logic
* It works like Rust's `Type { a: 1, b: 2, .. }` literals

* OLD AND INCORRECT vvv
* `array[...]` is syntax for lists
* `array` bit is required since `_[_]` is an operator and thus we cannot reuse `[` and `]`
*     to define list comprehensions
* On the bright side, you can define custom data types, such as `dictionary[...]`, `linkedList[...]`, etc.

* `new String` does not initialize string as POD, instead follows this algorithm:
new : (ty : CompTime[Type]) -> <args> -> ty
new = out fn ty -> do
    if :isSumType ty then panic "cannot create a sum type via `new`"
    fields = ty :getFields :unwrap
    areAllFieldsOut = not fields :map { not x.visibility :isOut } :any
    nonPODInstance = ty :getInstance NonPOD
    match (areAllFieldsOut, nonPODInstance :isSome) do
        Yes, Yes => panic "cannot decide which method of creation of {ty} to use: `NonPOD` or reflection"
        No,  No  => panic "cannot create {ty}: no ways available"
        Yes, No  => return createPOD fields
        No,  Yes => return createNonPOD (nonPODInstance :unwrap)

createPOD = fn fields -> ...
createNonPO = fn nonPODInstance -> ...

