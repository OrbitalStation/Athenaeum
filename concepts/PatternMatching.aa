* Haskell
and :: Bool -> Bool -> Bool
and Yes b = b
and No  _ = No

* Athenaeum
and : Bool -> Bool -> Bool
and = fn a b -> match a do
    Yes => b
    No  => No

and2 : Bool -> Bool -> Bool
and2 = fn a b -> match (a, b) do
    Yes, otherwise => fn b -> b
    No,  otherwise => No

fizzbuzz : IO Unit
fizzbuzz = for 1..100 fn i -> match (i % 3 == 0, i % 5 == 0) do
    Yes, Yes => println "FizzBuzz"
    Yes, No  => println "Fizz"
    No,  Yes => println "Buzz"
    No,  No  => println "{i}"

map : (a -> b) -> a? -> b?
map = fn f opt -> match opt do
    Some => fn x -> Some (f x)
    None => None

map2 : (a -> b -> c) -> a? -> b? -> c?
map2 = fn f a b -> match (a, b) do
    Some, Some => fn a b -> Some (f a b)
    otherwise  => None

mapDeep : (a -> b) -> a?? -> b?
mapDeep = fn f optopt -> match optopt do
    Some . Some => fn x -> Some (f x)
    otherwise   => None

mapDeep2 : (a -> b -> c) -> a?? -> b? -> c?
mapDeep2 = fn f a b -> match (a, b) do
    Some . Some, Some . Some => fn a b -> Some (f a b)
    otherwise                => None

mapk : IO Unit
mapk = do
    Enum =
        .Var1 : Int32  +
        .Var2 : Int32  +
        .Var3 : String +
    in variants Enum only *
    
    * Got 5
    * Got 7
    * Message: Aloha!
    for [(Var1 5) (Var2 7) (Var3 "Aloha")] fn v -> match v do
        Var1, Var2 => fn x -> println "Got {x}"
        Var3       => fn x -> println "Message: {x}!"

mapOr : (Unit -> a) -> a? -> a
mapOr : Lazy a -> a? -> a
mapOr = fn f opt -> match opt do
    Some => id
    None => f pass

* Rust
fn main() -> std::io::Result <()> {
    print!("Please enter a number: ");
    std::io::stdout().flush()?;
    let mut strbuf = String::new();
    std::io::stdin().get_line(&mut strbuf)?;
    let num = strbuf.parse::<i32>().expect("You did not enter a number");
    match num {
        1     => println!("You entered '1'!"),
        2     => println!("Two is two and 2 is too"),
        3 | 7 => println!("Three or seven is a fairly common choice"),
        x@4..10 => println!("Your number is less than ten and in fact is {x}"),
        x if x % 2 == 0 => "{x} is even"
        x if x < 100 => "Your number is odd and less than a hundred!"
        x => println "Your number is {x} and I have no idea what to do about it"
    }
    Ok(())
}

* Athenaeum
main : IO Unit!
main = do
    printFlush "Please enter a number: "
    num = scanln? :into Int32 :err? { "You did not enter a number" }
    match num do
        1    => println "You entered '1'!"
        2    => println "Two is two and 2 is too"
        3, 7 => println "Three or seven is a fairly common choice"
        4..9 => fn x -> println "Your number is less than ten and in fact is {x}"
        case { x mod 2 == 0 } => fn x -> "{x} is even"
        case { x < 100 } => "Your number is odd and less than a hundred!"
        otherwise => fn x -> println "Your number is {x} and I have no idea what to do about it"
    return Ok pass

************************* Sequences
* Arrays do not support destructuring
head : Array a l -> a?
head = fn a -> a :at 1

tail : Array a l -> Array a (l saturatingSub 1)
tail = fn a -> a[2..]

popFront : Array a l -> a? * Array a (l saturatingSub 1)
popFront = fn a -> a :at 1, a[2..]

popBack : Array a l -> a? * Array a (l saturatingSub 1)
popBack = fn a -> a :at (a :len), a[..<(a :len)]

* Rust's `if let` and `let else`
if let Some(cmd_arg) = possible_arg {
    builder.push(cmd_arg);
    println("Thanks for arg!")
}

if let Pokemon::Pikachu(stats) = pokemon {
    println("Pikachu's electrification: {}", stats.electrification)
}

let Ok(user_id) = db.find_user_by_name("Jakob") else { return -1 };

* Athenaeum
inspect : a? -> (a -> IO Unit) -> IO Unit
inspect = fn opt ifSome -> match opt do
    Some => ifSome
    None => identity

inspect2 = fn opt isSome -> incase opt Some isSome
inspect3 = fn opt -> incase opt Some
inspect4 = flip incase Some

incase : a -> (b -> a) -> (b -> IO Unit) -> IO Unit
incase = fn toMatch variant toDo -> match toMatch do
    variant   => toDo
    otherwise => pass

incase possibleArg Some fn cmdArg -> do
    builder :++= cmdArg
    println "Thanks for arg!"

incase pokemon Pokemon.Pikachu fn stats -> do
    println "Pikachu's electrification: {stats.electrification}"

val userId = db :findUserByName "Jakob" :or { return -1 }

* vvv shit because we do not allow multiple arguments anymore
* Is parsing unambiguous?
* Yes, because of the distinction of first lowercase/uppercase letter
fn
    * Two args `some` and `text` or one of decomposition of `some text`?
    * Two of `some` and `text` because both are lowercase
    some text -> ...

    * Two args `Some` and `text` or one of decomposition of `Some text`?
    * One of `Some text` because wrapped in parentheses
    (Some text) -> ...
    
    * Two args `Yes` and `text` or one of decomposition of `Yes text`?
    * Two of `Yes text` because no parentheses
    Yes text -> ...

    * Rust's (a, B(c)) => ...
    a (B c) -> ...

    * Rust's (A(b, c), d) => ...
    (A b, c) d -> ...
