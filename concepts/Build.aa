* Placed in the `root`, not `root/src`

in AA.Build *

build :: Builder
out build = do
    name "Athenaeum"
    version "0.0.0"
    dependencies deps
    buildDependencies buildDeps

* Separate fn for clarity
* `prelude` imports everything from `Prelude.aa` file from dependencies
deps :: Array Dependency
deps = standardDeps + array
   * Imports extern package `Regex` of semver version `3.*`(`*` means latest minor and patch)
   *     from user `@SomeGuy` from the package registry
   * You can delete a published package, but:
   *     1. If the deletion process is initiated less than 1 full day after the release
   *            then the deletion will take 24 hours and during that time users will get warnings
   *            about the upcoming package deletion
   *        After 24h pass, the crate will be fully removed from the registry
   *        Note that already downloaded versions of the crate will still be physically present
   *     2. If the deletion process is initiated after 1 full day after the release then
   *            everything from point 1 applies except that it will take 1 whole month to delete
   *     3. If the package is available in public namespace it no longer can be deleted
   *        You can delete your original package though, and thus "freeze" public version
   *            for it will no longer be able to receive updates until the community decides
   *            to assign another package to this name under new version or decides to fork the package
   *            and give it to someone else for maintenance (should only be possible if the license
   *            and/or creator give permission to do so)
   * You can cancel the deletion at any point in time
   * If the community votes for your package it can become available in the public namespace, i.e.
   *     you can omit `@Author` when importing it
   * This behaviour is how Rust's `crates.io` currently functions
   * If the package suddenly becomes worse or if a better alternative emerges the community can vote again to
   *     redirect future versions of the package to new location whilst preserving old ones
   *
   * `noprefix` means there won't be `AA` prefix
   prelude ∘ noprefix ∘ author "@SomeGuy" ∘ dep .Regex "3.*",

* Autogenerated
* All these dependencies are automatically prefixed with `AA`
standardDeps :: Array Dependency
standardDeps = array
    prelude ∘ dep .FileSystem "1.*",
    prelude ∘ dep .Array      "1.*",
    prelude ∘ dep .Terminal   "1.*",
    prelude ∘ dep .Math       "1.*",
    * --snip-- *

* Autogenerated
* This is somewhat circular since `Build.aa` specifies dependencies for itself
buildDeps :: Array Dependency
buildDeps = array
    dep .Build "1.*",
