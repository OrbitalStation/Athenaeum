* Consider these two statements, one with `consteval` and one without:
N1 =           scanln :unwrap :into Int :unwrap
N2 = consteval scanln :unwrap :into Int :unwrap

* Their types are as follows:
* `N2` does not have any monadic effects in it
* The thing is, `consteval` evaluates `IO` in compile time,
*     meaning that `scanln`, `into` and `unwrap` happen during compiletime
* 	  and not runtime, leaving the end value without the side effects
* In fact, `consteval` evaluates anything in compile time, not only `IO`,
*     but that is usually automatically done by the compiler and so kinda pointless
* It is useful however when you need to be 100% sure the value is known during compilation
N1 : IO Int
N2 : Int

* `N2` can now be used in const context, although such a thing does not exist in `Athenaeum`,
*     or more precisely it is not a separate thing, it's just naturally built-in to the language
myArray : Array Uint N2
myArray = out [27] :repeat N2

* Why `consteval` and not just `const`?
* Because functions are verbs and should describe actions
* Why not `comptime`?
* For the same reason as above
* Why not `comptimeeval`?
* Fair point, that would be better, but that's just... eh, ugly
* Plus `consteval` is a term familiar to C++ developers where it performs a
*     similar function, so that's nice

