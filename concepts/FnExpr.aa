* I had to say "no" to Kotlin-style lambda expressions
* It was a difficult decision to make, but it helps consistency,
*   since adding a syntactic sugar *over a syntactic sugar* is overkill,
*   plus `{ x -> x }` is not that much easier to read compared to `fn x -> x`
* Compare two(hypothetical) code snippets:
* Kotlin's
* `seq.withIndex().filter{ i, v -> v % i == 0 }.map{ it.second }.toSet()`
* Athenaeum's
* `seq :enumerate :filter fn i, v -> v % i == 0 :map fn x -> x.second :collect Set`
* IDK, second is also alright

* `fn a -> b` == Haskell's `\a -> b`
* `fn a b c -> d` == `fn a -> fn b -> fn c -> d`
*     == Haskell's `\a b c -> d` == `\a -> \b -> \c -> d`
