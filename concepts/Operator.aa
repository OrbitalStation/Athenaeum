* ASCII punctuation is not allowed to be used in identifiers,
*   but the rest of unicode punctuation is okay

* Operators may take 1 or 2 arguments in different positions
* Only unicode punctuation characters may be used though
* Example:
operator (_) = identity
operator _[_] = fn collection index -> collection :at index
operator infix left 10 _+_ = add
* `operator` here is a special built-in attribute macro that is not really a macro but a syntax
* This is due to the fact that operators are unfolded before the AST buildup and thus
*   if someone declared `myOp = operator("lazy")` and then used it as an attribute macro
*   you would need to perform analysis before the unfolding which would lead to many problems
* `operator`'s arguments are of form:
*   1. `[left/right] <precedence>` for binary operators whose argument list looks like this:
*       `_op_`, i.e. if `op` is surrounded by `_`
*       This is because binary operators of such form require different parsing rules depending on their precedence
*       Example are `a + b * c` which would be parsed as `(a + b) * c` if there was no precedence
*           and `a ^^ b ^^ c` which would be parsed as `(a ^^ b) ^^ c` if there was no associativity
*   2. *nothing* for the rest
*       Yeah, it's not like they need any custom settings and so - nothing
*       They are treated like atoms, so `(_)`, `+_`, `-_`, `_?`, `!_`, etc. all have the same precedence
* You can reuse operator lexemes in other operators as long as it does not lead to multiple ways to parse
* You cannot use the lexemes elsewhere, though (applies only to operators with words in them)
* E.g. `_+_` and `+_` are fine but not `_[_]` and `[_]`
* And yes, we just defined parentheses and indexing operators via the language semantics
* Pretty cool, huh?
* `_` denote position of arguments in the style of Agda

* `+_`, `_+_` and `_+`
* `a + b` == `(a+) b` or `a (+b)` or `a + b`?
* The binary operator has the precedence, so unary variants are parsed only if binary one cannot

* Automatically enforces lazy evaluation
_and_ : And a b => Lazy a -> Lazy b -> Output
operator infix left 10 _and_ = fn a b -> match (a pass) do
	No  => No
	Yes => b pass

* `_and_`, `_or_` and `not_` operators
* Why not use `&&`, `||` and `!`?
* Because that's ugly and also `!` is used to denote `Result` type

* To denote bitwise operations there are `_&_`, `_|_`, `_^^_`, `_<<_`, `_>>_`, `~_`
* As well as their assignment counterparts: `_:&=_`, `_:|=_`, `_:^^=_`, `_:<<=_`, `_:>>=_`
* Bitwise xor is denoted by `_^^_`. not by `_^_` as this operator is used for exponentiation
* Every one of these is available via `AA.Bitwise` imported by default
* They are defined by `AA.Bitwise.Operators` module and their implementation resides
*     in `AA.Bitwise.Gates` and `AA.Bitwise.Shifts` modules in function form (`and`, `xor`, `shl`, etc.) along with other gates (`nand`, `nor`, etc.)

* `_^_` denotes exponentiation (no ugly `_**_`)
* Assignment via `_:^=_`
*
* `return_` operator
* `if_then_` + `_else_` pair of operators
* `_else_` has lower precedence than `if_then_`
if (isAuthor and isRecent) or isAdmin then ...
if (isAuthor & isRecent) | isAdmin then ...

* `for` and `while` are not operators, just plain function
* This is due to the fact that `for` introduces new variables and thus
*	  has either to resort to `fn` or to make it on its own, but the latter
*	  would require syntactical support and so - no
* `while`, meanwhile, has to constantly reevaluate the condition which
*	  cannot be achieved using laziness for it only evaluates 0 or 1 times

* `if then else` operators
if aaa bbb then
	ccc ddd
else if eee fff then
	ggg hhh
else
	iii jjj

* Above is equivalent to:
ifFn { aaa bbb } thenFn
	{ ccc ddd }
elseFn <| fn _ -> ifFn { eee fff } thenFn
	{ ggg hhh }
elseFn
	{ iii jjj }

* All these `{ ... }` and `fn _ ->` are required because of the eager nature of the language, i.e.
*	they are used to simulate laziness

while { aaa bbb } do
	ccc

for (obtain iterable) fn it -> do
	aaa

